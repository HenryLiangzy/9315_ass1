---------------------------------------------------------------------------
--
-- intset.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/complex.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'complex' which represents
--	complex numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/complex$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/complex.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'complex_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'complex'
-- does not exist yet but that's okay.

CREATE FUNCTION intset_in(cstring)
   RETURNS intSet
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'complex_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION intSet_out(intSet)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

CREATE TYPE intset (
   internallength = variable,
   input = intset_in,
   output = intset_out
);


-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------


CREATE FUNCTION intset_eq(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_noteq(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_cardinality(intSet) RETURNS integer
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_contain(integer, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_superset(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_subset(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_intersect(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_union(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;


CREATE OPERATOR = (
   leftarg = intSet, rightarg = intSet, procedure = intset_eq
);

CREATE OPERATOR <> (
   leftarg = intSet, rightarg = intSet, procedure = intset_noteq
);

CREATE OPERATOR # (
   rightarg = intSet, procedure = intset_cardinality
);

CREATE OPERATOR ? (
   leftarg = integer, rightarg = intSet, procedure = intset_contain
);

CREATE OPERATOR >@ (
   leftarg = intSet, rightarg = intSet, procedure = intset_superset
);

CREATE OPERATOR @< (
   leftarg = intSet, rightarg = intSet, procedure = intset_subset
);

CREATE OPERATOR && (
   leftarg = intSet, rightarg = intSet, procedure = intset_intersect
);

CREATE OPERATOR || (
   leftarg = intSet, rightarg = intSet, procedure = intset_union
);
